#! /usr/bin/env python

# Monocular Pose Estimator dynamic parameter configuration file

PACKAGE='pf_mpe'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#       Name             Type      Level Description             Default Min   Max
gen.add("threshold_value", int_t,   0,    "The thresholding value for the images", 240,     0,     255)
gen.add("gaussian_sigma", double_t,   0,    "The standard deviation of the Gaussian blurring filter", 0.6, 0, 6)
gen.add("min_blob_area", double_t,   0,    "Smallest blob area found", 20,     0,     100)
gen.add("max_blob_area", double_t,   0,    "Largest blob area found", 160,     0,     1000)
gen.add("max_width_height_distortion", double_t, 0, "Max height width distortion of blob", 0.7, 0, 1)
gen.add("max_circular_distortion", double_t, 0, "Max deviation from roundness", 0.7, 0, 1)
gen.add("back_projection_pixel_tolerance", double_t, 0, "The pixel tolerance for the backprojection of points", 5, 0, 100)
gen.add("nearest_neighbour_pixel_tolerance", double_t, 0, "The pixel tolerance for finding point correspondences", 7, 0, 10)
gen.add("certainty_threshold", double_t, 0, "The proportion of back projected points that are correct for a set of image marker correspondences to be considered valid", 1, 0, 1)
gen.add("valid_correspondence_threshold", double_t, 0, "The proportion of correspondences that have to be correct based on the back projection of points for the entire correspondence list to be considered correct", 0.5, 0, 1)
gen.add("roi_border_thickness", int_t, 0, "The thickness of the boarder around the region of interest in pixels", 10, 0, 200)
gen.add("number_of_occlusions", int_t, 0, "Number of introduced occlusions after detecting the LEDs", 0, 0, 5)
gen.add("number_of_false_detections", int_t, 0, "Number of introduced false LED detections", 0, 0, 30)
gen.add("bUseParticleFilter", bool_t, 0, "Boolean which tells if the particle filter algorithm is used", True)
gen.add("bUseCamPos", bool_t, 0, "Boolean which tells if the movement of the camera is considered or not", False)
gen.add("N_Particle", int_t, 0, "Number of introduced particles", 1, 1, 20000)
gen.add("maxAngularNoise", double_t, 0, "max angular noise added by the particle (rad)", 0, -1.5, 1.5)
gen.add("minAngularNoise", double_t, 0, "min angular noise added by the particle (rad)", 0, -1.5, 1.5)
gen.add("maxTransitionNoise", double_t, 0, "max transition noise added by the particle (m)", 0, -0.5, 0.5)
gen.add("minTransitionNoise", double_t, 0, "min transition noise added by the particle (m)", 0, -0.5, 0.5)
gen.add("back_projection_pixel_tolerance_PF", double_t, 0, "The pixel tolerance for the backprojection of points (in the particle filter)", 10, 0, 100)
gen.add("active_markers", bool_t, 0, "Tells if the UAV has active or passive markers", True)
gen.add("bMarkerNr1", bool_t, 0, "Boolean which tells if the marker is downgraded", False)
gen.add("bMarkerNr2", bool_t, 0, "Boolean which tells if the marker is downgraded", False)
gen.add("bMarkerNr3", bool_t, 0, "Boolean which tells if the marker is downgraded", False)
gen.add("bMarkerNr4", bool_t, 0, "Boolean which tells if the marker is downgraded", False)
gen.add("bMarkerNr5", bool_t, 0, "Boolean which tells if the marker is downgraded", False)
gen.add("useOnlineExposeTimeControl", bool_t, 0, "boolean which tells if the algorithm uses an online image or just a video (if online image, use variable exposure time)", False)
gen.add("expose_time_base", int_t, 0, "exposure time assumed to be optimal for distances in z-direction closer than 2m", 2000, 10, 8000)


exit(gen.generate(PACKAGE, "pf_mpe", "PFMonocularPoseEstimator"))
